from config_ursse import get_from_config
import pickle
import os

repo_dir = get_from_config("repo_dir")

pickle_path = os.path.join(
    repo_dir,
    "analyzing_collected_data/for_sync_motion_note/numericalvalues.pkl")

sty_file_path = os.path.join(
    get_from_config("URSSE_sync_motion_note_dir"), "numericalvalues.sty")

def initialize():
    if os.path.exists(pickle_path):
        raise Exception("File exists! Perhaps you do not want to overwrite it.")
    with open(pickle_path, 'wb') as f:
        pickle.dump({}, f)

def newval(name, val, numformat, unit, changedfrom=None):
    with open(pickle_path, 'rb') as f:
        d = pickle.load(f)
    d[name] = {'val': val, 'numformat': numformat, 'unit': unit,
               'changedfrom': changedfrom}
    with open(pickle_path, 'wb') as f:
        pickle.dump(d, f)

def getval(name, outdict=None):
    with open(pickle_path, 'rb') as f:
        d = pickle.load(f)
    outdict = d[name].copy()
    return outdict['val']

def rmval(name):
    with open(pickle_path, 'rb') as f:
        d = pickle.load(f)
    try:
        del d[name]
    except:
        raise KeyError(f"Variable {name} is not found in the pickle.")
    with open(pickle_path, 'wb') as f:
        pickle.dump(d, f)


def regenerate_numericalvalues():
    with open(pickle_path, 'rb') as f:
        d = pickle.load(f)
    res = \
        r'% Do not edit this file. It is generated by a Python script.'+'\n'\
        + r'\ProvidesPackage{numericalvalues}'+'\n'\
        + r'\usepackage{siunitx}'+'\n'+'\n'+'\n'
    for name, data in d.items():
        val = data['val']
        numformat = data['numformat']
        unit = data['unit']
        res += r'\newcommand{\val'+name+r'}{\SI{'\
               + numformat.format(val)\
               + r'}{'\
               + unit\
               + r'}}'+'\n'
    with open(sty_file_path, 'w') as f:
        f.write(res)

def get_dict():
    with open(pickle_path, 'rb') as f:
        d = pickle.load(f)
    return d


if __name__ == "__main__":
    regenerate_numericalvalues()
